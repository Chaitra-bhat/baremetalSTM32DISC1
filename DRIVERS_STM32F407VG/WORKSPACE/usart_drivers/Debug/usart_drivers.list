
usart_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000b54  08000b54  00010b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b58  08000b58  00010b60  2**0
                  CONTENTS
  4 .ARM          00000000  08000b58  08000b58  00010b60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b58  08000b60  00010b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b58  08000b58  00010b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b5c  08000b5c  00010b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b60  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019da  00000000  00000000  00010b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000469  00000000  00000000  0001256a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  000129d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00012b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021f5  00000000  00000000  00012c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001709  00000000  00000000  00014e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000993d  00000000  00000000  0001651e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001fe5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000454  00000000  00000000  0001feb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b3c 	.word	0x08000b3c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b3c 	.word	0x08000b3c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInit>:

#include<gpio.h>
#include<spi.h>

void SPI2_GPIOInit(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIOHandle_t pGPIOPin;


	pGPIOPin.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SPI2_GPIOInit+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	pGPIOPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUNC;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	pGPIOPin.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	pGPIOPin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	pGPIOPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDTYPE_NONE;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	pGPIOPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//Configure each pin as per comments
	//1. SCLK
	pGPIOPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PINNUMBER_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&pGPIOPin);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f889 	bl	8000334 <GPIO_Init>

	//2. MOSI
	pGPIOPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PINNUMBER_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&pGPIOPin);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f883 	bl	8000334 <GPIO_Init>
	//GPIO_Init(&pGPIOPin);

	//4. NSS
	//pGPIOPin->GPIO_PinConfig.GPIO_PinNumber = GPIO_PINNUMBER_12;
	//GPIO_Init(&pGPIOPin);
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <SPI2_init>:

void SPI2_init()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
	SPI_Handle_t pSPI2Handle;

	pSPI2Handle.pSPIx = SPI2;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <SPI2_init+0x38>)
 8000244:	603b      	str	r3, [r7, #0]
	pSPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUSCONFIG_FULLDUPLEX;
 8000246:	2301      	movs	r3, #1
 8000248:	60bb      	str	r3, [r7, #8]
	pSPI2Handle.SPIConfig.SPI_DEVICEMODE = SPI_DEVICEMODE_MASTER;
 800024a:	2301      	movs	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
	pSPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_BAUDRATE_DIV2;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	pSPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
	pSPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
	pSPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]
	pSPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_ENABLE;
 800025e:	2301      	movs	r3, #1
 8000260:	61fb      	str	r3, [r7, #28]

	SPI_Init(&pSPI2Handle);
 8000262:	463b      	mov	r3, r7
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fb6d 	bl	8000944 <SPI_Init>
}
 800026a:	bf00      	nop
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40003800 	.word	0x40003800

08000278 <main>:


int main()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
	char userData[] = "hh";
 800027e:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <main+0x60>)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	6812      	ldr	r2, [r2, #0]
 8000284:	4611      	mov	r1, r2
 8000286:	8019      	strh	r1, [r3, #0]
 8000288:	3302      	adds	r3, #2
 800028a:	0c12      	lsrs	r2, r2, #16
 800028c:	701a      	strb	r2, [r3, #0]
	SPI2_GPIOInit();
 800028e:	f7ff ffb3 	bl	80001f8 <SPI2_GPIOInit>
	SPI2_init();
 8000292:	f7ff ffd3 	bl	800023c <SPI2_init>

	//Enable the SPI peripheral
	//SPI_PeripheralEnable(SPI2, ENABLE);

	//SSI Enable
	SPI_SSIConfig(SPI2, ENABLE);
 8000296:	2101      	movs	r1, #1
 8000298:	4810      	ldr	r0, [pc, #64]	; (80002dc <main+0x64>)
 800029a:	f000 fc0f 	bl	8000abc <SPI_SSIConfig>

	//Enable the SPI peripheral
	SPI_PeripheralEnable(SPI2, ENABLE);
 800029e:	2101      	movs	r1, #1
 80002a0:	480e      	ldr	r0, [pc, #56]	; (80002dc <main+0x64>)
 80002a2:	f000 fbef 	bl	8000a84 <SPI_PeripheralEnable>
	SPI_SendData(SPI2, (uint8_t*)userData, strlen(userData));
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff9d 	bl	80001e8 <strlen>
 80002ae:	4602      	mov	r2, r0
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4619      	mov	r1, r3
 80002b4:	4809      	ldr	r0, [pc, #36]	; (80002dc <main+0x64>)
 80002b6:	f000 fb9a 	bl	80009ee <SPI_SendData>

	//lets confirm SPI is not busy
	while( SPI_GetFlagStatus(SPI2,(1<<8)) );
 80002ba:	bf00      	nop
 80002bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c0:	4806      	ldr	r0, [pc, #24]	; (80002dc <main+0x64>)
 80002c2:	f000 fbcb 	bl	8000a5c <SPI_GetFlagStatus>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1f7      	bne.n	80002bc <main+0x44>

	//Disable the SPI2 peripheral
	SPI_PeripheralEnable(SPI2,DISABLE);
 80002cc:	2100      	movs	r1, #0
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <main+0x64>)
 80002d0:	f000 fbd8 	bl	8000a84 <SPI_PeripheralEnable>

	while(1);
 80002d4:	e7fe      	b.n	80002d4 <main+0x5c>
 80002d6:	bf00      	nop
 80002d8:	08000b54 	.word	0x08000b54
 80002dc:	40003800 	.word	0x40003800

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 fbf1 	bl	8000af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ffb1 	bl	8000278 <main>

08000316 <LoopForever>:

LoopForever:
    b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	08000b60 	.word	0x08000b60
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC_IRQHandler>
	...

08000334 <GPIO_Init>:

/*
 * INITILIZATION AND DEINITILIZATION
 */
void GPIO_Init(GPIOHandle_t *pGPIOHandle)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]

	uint32_t temp, temp1, temp2;
	uint8_t portcode;
	GPIO_PeriClockEnable(pGPIOHandle->pGPIOx, ENABLE);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f9a6 	bl	8000694 <GPIO_PeriClockEnable>

	//1. Configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	2b03      	cmp	r3, #3
 800034e:	d820      	bhi.n	8000392 <GPIO_Init+0x5e>
	{
		//Non interrupt mode

		//Initilly clear the bits
		pGPIOHandle->pGPIOx->MODER &= ~(0x3U << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	6819      	ldr	r1, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	461a      	mov	r2, r3
 800035c:	2303      	movs	r3, #3
 800035e:	4093      	lsls	r3, r2
 8000360:	43da      	mvns	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	400a      	ands	r2, r1
 8000368:	601a      	str	r2, [r3, #0]
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	795b      	ldrb	r3, [r3, #5]
 800036e:	461a      	mov	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	791b      	ldrb	r3, [r3, #4]
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	6819      	ldr	r1, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	68ba      	ldr	r2, [r7, #8]
 8000388:	430a      	orrs	r2, r1
 800038a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	e0df      	b.n	8000552 <GPIO_Init+0x21e>

	}
	else
	{
		//Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_FT)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	795b      	ldrb	r3, [r3, #5]
 8000396:	2b04      	cmp	r3, #4
 8000398:	d117      	bne.n	80003ca <GPIO_Init+0x96>
		{
			//1.Configure FTSR register
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800039a:	4b4f      	ldr	r3, [pc, #316]	; (80004d8 <GPIO_Init+0x1a4>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	7912      	ldrb	r2, [r2, #4]
 80003a2:	4611      	mov	r1, r2
 80003a4:	2201      	movs	r2, #1
 80003a6:	408a      	lsls	r2, r1
 80003a8:	4611      	mov	r1, r2
 80003aa:	4a4b      	ldr	r2, [pc, #300]	; (80004d8 <GPIO_Init+0x1a4>)
 80003ac:	430b      	orrs	r3, r1
 80003ae:	60d3      	str	r3, [r2, #12]

			// Clear RTSR bit
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b0:	4b49      	ldr	r3, [pc, #292]	; (80004d8 <GPIO_Init+0x1a4>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	7912      	ldrb	r2, [r2, #4]
 80003b8:	4611      	mov	r1, r2
 80003ba:	2201      	movs	r2, #1
 80003bc:	408a      	lsls	r2, r1
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a45      	ldr	r2, [pc, #276]	; (80004d8 <GPIO_Init+0x1a4>)
 80003c4:	400b      	ands	r3, r1
 80003c6:	6093      	str	r3, [r2, #8]
 80003c8:	e035      	b.n	8000436 <GPIO_Init+0x102>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_RT)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	d117      	bne.n	8000402 <GPIO_Init+0xce>
		{
			//1. Configure RTSR register
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d2:	4b41      	ldr	r3, [pc, #260]	; (80004d8 <GPIO_Init+0x1a4>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7912      	ldrb	r2, [r2, #4]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a3d      	ldr	r2, [pc, #244]	; (80004d8 <GPIO_Init+0x1a4>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	6093      	str	r3, [r2, #8]

			// Clear FTSR bit
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e8:	4b3b      	ldr	r3, [pc, #236]	; (80004d8 <GPIO_Init+0x1a4>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	7912      	ldrb	r2, [r2, #4]
 80003f0:	4611      	mov	r1, r2
 80003f2:	2201      	movs	r2, #1
 80003f4:	408a      	lsls	r2, r1
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a37      	ldr	r2, [pc, #220]	; (80004d8 <GPIO_Init+0x1a4>)
 80003fc:	400b      	ands	r3, r1
 80003fe:	60d3      	str	r3, [r2, #12]
 8000400:	e019      	b.n	8000436 <GPIO_Init+0x102>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_RFT)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	795b      	ldrb	r3, [r3, #5]
 8000406:	2b06      	cmp	r3, #6
 8000408:	d115      	bne.n	8000436 <GPIO_Init+0x102>
		{
			//1. Configure both FTSR and RTSr registers
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040a:	4b33      	ldr	r3, [pc, #204]	; (80004d8 <GPIO_Init+0x1a4>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	4611      	mov	r1, r2
 800041a:	4a2f      	ldr	r2, [pc, #188]	; (80004d8 <GPIO_Init+0x1a4>)
 800041c:	430b      	orrs	r3, r1
 800041e:	60d3      	str	r3, [r2, #12]

			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000420:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <GPIO_Init+0x1a4>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a29      	ldr	r2, [pc, #164]	; (80004d8 <GPIO_Init+0x1a4>)
 8000432:	430b      	orrs	r3, r1
 8000434:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	089b      	lsrs	r3, r3, #2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	617b      	str	r3, [r7, #20]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	f003 0303 	and.w	r3, r3, #3
 8000448:	613b      	str	r3, [r7, #16]

		portcode = GPIOBASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a23      	ldr	r2, [pc, #140]	; (80004dc <GPIO_Init+0x1a8>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d057      	beq.n	8000504 <GPIO_Init+0x1d0>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <GPIO_Init+0x1ac>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d039      	beq.n	80004d2 <GPIO_Init+0x19e>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a20      	ldr	r2, [pc, #128]	; (80004e4 <GPIO_Init+0x1b0>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d032      	beq.n	80004ce <GPIO_Init+0x19a>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a1e      	ldr	r2, [pc, #120]	; (80004e8 <GPIO_Init+0x1b4>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d02b      	beq.n	80004ca <GPIO_Init+0x196>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <GPIO_Init+0x1b8>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d024      	beq.n	80004c6 <GPIO_Init+0x192>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <GPIO_Init+0x1bc>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d01d      	beq.n	80004c2 <GPIO_Init+0x18e>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <GPIO_Init+0x1c0>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d016      	beq.n	80004be <GPIO_Init+0x18a>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a18      	ldr	r2, [pc, #96]	; (80004f8 <GPIO_Init+0x1c4>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d00f      	beq.n	80004ba <GPIO_Init+0x186>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a17      	ldr	r2, [pc, #92]	; (80004fc <GPIO_Init+0x1c8>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d008      	beq.n	80004b6 <GPIO_Init+0x182>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a15      	ldr	r2, [pc, #84]	; (8000500 <GPIO_Init+0x1cc>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d101      	bne.n	80004b2 <GPIO_Init+0x17e>
 80004ae:	2309      	movs	r3, #9
 80004b0:	e029      	b.n	8000506 <GPIO_Init+0x1d2>
 80004b2:	2300      	movs	r3, #0
 80004b4:	e027      	b.n	8000506 <GPIO_Init+0x1d2>
 80004b6:	2308      	movs	r3, #8
 80004b8:	e025      	b.n	8000506 <GPIO_Init+0x1d2>
 80004ba:	2307      	movs	r3, #7
 80004bc:	e023      	b.n	8000506 <GPIO_Init+0x1d2>
 80004be:	2306      	movs	r3, #6
 80004c0:	e021      	b.n	8000506 <GPIO_Init+0x1d2>
 80004c2:	2305      	movs	r3, #5
 80004c4:	e01f      	b.n	8000506 <GPIO_Init+0x1d2>
 80004c6:	2304      	movs	r3, #4
 80004c8:	e01d      	b.n	8000506 <GPIO_Init+0x1d2>
 80004ca:	2303      	movs	r3, #3
 80004cc:	e01b      	b.n	8000506 <GPIO_Init+0x1d2>
 80004ce:	2302      	movs	r3, #2
 80004d0:	e019      	b.n	8000506 <GPIO_Init+0x1d2>
 80004d2:	2301      	movs	r3, #1
 80004d4:	e017      	b.n	8000506 <GPIO_Init+0x1d2>
 80004d6:	bf00      	nop
 80004d8:	40013c00 	.word	0x40013c00
 80004dc:	40020000 	.word	0x40020000
 80004e0:	40020400 	.word	0x40020400
 80004e4:	40020800 	.word	0x40020800
 80004e8:	40020c00 	.word	0x40020c00
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40021400 	.word	0x40021400
 80004f4:	40021800 	.word	0x40021800
 80004f8:	40021c00 	.word	0x40021c00
 80004fc:	40022000 	.word	0x40022000
 8000500:	40022400 	.word	0x40022400
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
		SYSCFG_PCLK_ENABLE();
 8000508:	4b5f      	ldr	r3, [pc, #380]	; (8000688 <GPIO_Init+0x354>)
 800050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050c:	4a5e      	ldr	r2, [pc, #376]	; (8000688 <GPIO_Init+0x354>)
 800050e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000512:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] |= portcode << (temp2*4);
 8000514:	4a5d      	ldr	r2, [pc, #372]	; (800068c <GPIO_Init+0x358>)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	3302      	adds	r3, #2
 800051a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051e:	7bf9      	ldrb	r1, [r7, #15]
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	4958      	ldr	r1, [pc, #352]	; (800068c <GPIO_Init+0x358>)
 800052a:	431a      	orrs	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3302      	adds	r3, #2
 8000530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		temp1 = temp2 = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	617b      	str	r3, [r7, #20]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800053c:	4b54      	ldr	r3, [pc, #336]	; (8000690 <GPIO_Init+0x35c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	7912      	ldrb	r2, [r2, #4]
 8000544:	4611      	mov	r1, r2
 8000546:	2201      	movs	r2, #1
 8000548:	408a      	lsls	r2, r1
 800054a:	4611      	mov	r1, r2
 800054c:	4a50      	ldr	r2, [pc, #320]	; (8000690 <GPIO_Init+0x35c>)
 800054e:	430b      	orrs	r3, r1
 8000550:	6013      	str	r3, [r2, #0]


	//2. Configure the speed

	//Initally clear the bit
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6899      	ldr	r1, [r3, #8]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	461a      	mov	r2, r3
 800055e:	2303      	movs	r3, #3
 8000560:	4093      	lsls	r3, r2
 8000562:	43da      	mvns	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	400a      	ands	r2, r1
 800056a:	609a      	str	r2, [r3, #8]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	799b      	ldrb	r3, [r3, #6]
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6899      	ldr	r1, [r3, #8]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	430a      	orrs	r2, r1
 800058c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]

	//3. Configure PuPd mode
	//Initally clear the bit
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68d9      	ldr	r1, [r3, #12]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	461a      	mov	r2, r3
 800059e:	2303      	movs	r3, #3
 80005a0:	4093      	lsls	r3, r2
 80005a2:	43da      	mvns	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	400a      	ands	r2, r1
 80005aa:	60da      	str	r2, [r3, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	79db      	ldrb	r3, [r3, #7]
 80005b0:	461a      	mov	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68d9      	ldr	r1, [r3, #12]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	430a      	orrs	r2, r1
 80005cc:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]

	//4.Configure Output type
	//Initally clear the bit
	pGPIOHandle->pGPIOx->OTYPER &= ~(1U << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6859      	ldr	r1, [r3, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	461a      	mov	r2, r3
 80005de:	2301      	movs	r3, #1
 80005e0:	4093      	lsls	r3, r2
 80005e2:	43da      	mvns	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	400a      	ands	r2, r1
 80005ea:	605a      	str	r2, [r3, #4]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7a1b      	ldrb	r3, [r3, #8]
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	60bb      	str	r3, [r7, #8]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6859      	ldr	r1, [r3, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	430a      	orrs	r2, r1
 800060a:	605a      	str	r2, [r3, #4]
	temp = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]

	//5. Configure Alternate functionality type
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUNC)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	795b      	ldrb	r3, [r3, #5]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d133      	bne.n	8000680 <GPIO_Init+0x34c>
	{

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	617b      	str	r3, [r7, #20]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	613b      	str	r3, [r7, #16]

		//Initially clear the bit
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	3208      	adds	r2, #8
 8000634:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	7a5b      	ldrb	r3, [r3, #9]
 800063c:	43db      	mvns	r3, r3
 800063e:	4619      	mov	r1, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4011      	ands	r1, r2
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	3208      	adds	r2, #8
 800064a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	697a      	ldr	r2, [r7, #20]
 8000654:	3208      	adds	r2, #8
 8000656:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	7a5b      	ldrb	r3, [r3, #9]
 800065e:	4619      	mov	r1, r3
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	4619      	mov	r1, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4311      	orrs	r1, r2
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	3208      	adds	r2, #8
 8000674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp1 = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
		temp2 = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
	}



}
 8000680:	bf00      	nop
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40013800 	.word	0x40013800
 8000690:	40013c00 	.word	0x40013c00

08000694 <GPIO_PeriClockEnable>:

/*
 * PERIPHERAL CLOCK ENABLE AND DISABLE
 */
void GPIO_PeriClockEnable(GPIO_RegDef_t *pGPIOx, uint8_t EnaOrDis)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
	if(EnaOrDis == ENABLE)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d16d      	bne.n	8000782 <GPIO_PeriClockEnable+0xee>
	{
	if(pGPIOx == GPIOA)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a6f      	ldr	r2, [pc, #444]	; (8000868 <GPIO_PeriClockEnable+0x1d4>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d106      	bne.n	80006bc <GPIO_PeriClockEnable+0x28>
		GPIOA_PCLK_ENABLE();
 80006ae:	4b6f      	ldr	r3, [pc, #444]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a6e      	ldr	r2, [pc, #440]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
			GPIOI_PCLK_DISABLE();
		else if(pGPIOx == GPIOJ)
			GPIOJ_PCLK_DISABLE();
	}
}
 80006ba:	e0cf      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOB)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a6c      	ldr	r2, [pc, #432]	; (8000870 <GPIO_PeriClockEnable+0x1dc>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d106      	bne.n	80006d2 <GPIO_PeriClockEnable+0x3e>
		GPIOB_PCLK_ENABLE();
 80006c4:	4b69      	ldr	r3, [pc, #420]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a68      	ldr	r2, [pc, #416]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80006ca:	f043 0302 	orr.w	r3, r3, #2
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d0:	e0c4      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOC)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a67      	ldr	r2, [pc, #412]	; (8000874 <GPIO_PeriClockEnable+0x1e0>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d106      	bne.n	80006e8 <GPIO_PeriClockEnable+0x54>
		GPIOC_PCLK_ENABLE();
 80006da:	4b64      	ldr	r3, [pc, #400]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a63      	ldr	r2, [pc, #396]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e6:	e0b9      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOD)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a63      	ldr	r2, [pc, #396]	; (8000878 <GPIO_PeriClockEnable+0x1e4>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d106      	bne.n	80006fe <GPIO_PeriClockEnable+0x6a>
		GPIOD_PCLK_ENABLE();
 80006f0:	4b5e      	ldr	r3, [pc, #376]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	4a5d      	ldr	r2, [pc, #372]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006fc:	e0ae      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOE)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a5e      	ldr	r2, [pc, #376]	; (800087c <GPIO_PeriClockEnable+0x1e8>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <GPIO_PeriClockEnable+0x80>
		GPIOE_PCLK_ENABLE();
 8000706:	4b59      	ldr	r3, [pc, #356]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a58      	ldr	r2, [pc, #352]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000712:	e0a3      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOF)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a5a      	ldr	r2, [pc, #360]	; (8000880 <GPIO_PeriClockEnable+0x1ec>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <GPIO_PeriClockEnable+0x96>
		GPIOF_PCLK_ENABLE();
 800071c:	4b53      	ldr	r3, [pc, #332]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	4a52      	ldr	r2, [pc, #328]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000728:	e098      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOG)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a55      	ldr	r2, [pc, #340]	; (8000884 <GPIO_PeriClockEnable+0x1f0>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <GPIO_PeriClockEnable+0xac>
		GPIOG_PCLK_ENABLE();
 8000732:	4b4e      	ldr	r3, [pc, #312]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a4d      	ldr	r2, [pc, #308]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073e:	e08d      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOH)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a51      	ldr	r2, [pc, #324]	; (8000888 <GPIO_PeriClockEnable+0x1f4>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <GPIO_PeriClockEnable+0xc2>
		GPIOH_PCLK_ENABLE();
 8000748:	4b48      	ldr	r3, [pc, #288]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	4a47      	ldr	r2, [pc, #284]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000754:	e082      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOI)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a4c      	ldr	r2, [pc, #304]	; (800088c <GPIO_PeriClockEnable+0x1f8>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <GPIO_PeriClockEnable+0xd8>
		GPIOI_PCLK_ENABLE();
 800075e:	4b43      	ldr	r3, [pc, #268]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a42      	ldr	r2, [pc, #264]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
}
 800076a:	e077      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
	else if(pGPIOx == GPIOJ)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a48      	ldr	r2, [pc, #288]	; (8000890 <GPIO_PeriClockEnable+0x1fc>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d173      	bne.n	800085c <GPIO_PeriClockEnable+0x1c8>
		GPIOJ_PCLK_ENABLE();
 8000774:	4b3d      	ldr	r3, [pc, #244]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4a3c      	ldr	r2, [pc, #240]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 800077a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000780:	e06c      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		if(pGPIOx == GPIOA)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a38      	ldr	r2, [pc, #224]	; (8000868 <GPIO_PeriClockEnable+0x1d4>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <GPIO_PeriClockEnable+0x104>
			GPIOA_PCLK_DISABLE();
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a37      	ldr	r2, [pc, #220]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000796:	e061      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOB)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a35      	ldr	r2, [pc, #212]	; (8000870 <GPIO_PeriClockEnable+0x1dc>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <GPIO_PeriClockEnable+0x11a>
			GPIOB_PCLK_DISABLE();
 80007a0:	4b32      	ldr	r3, [pc, #200]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a31      	ldr	r2, [pc, #196]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007a6:	f023 0302 	bic.w	r3, r3, #2
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ac:	e056      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOC)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a30      	ldr	r2, [pc, #192]	; (8000874 <GPIO_PeriClockEnable+0x1e0>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PeriClockEnable+0x130>
			GPIOC_PCLK_DISABLE();
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007bc:	f023 0304 	bic.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c2:	e04b      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOD)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <GPIO_PeriClockEnable+0x1e4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <GPIO_PeriClockEnable+0x146>
			GPIOD_PCLK_DISABLE();
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a26      	ldr	r2, [pc, #152]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007d2:	f023 0308 	bic.w	r3, r3, #8
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d8:	e040      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOE)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <GPIO_PeriClockEnable+0x1e8>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <GPIO_PeriClockEnable+0x15c>
			GPIOE_PCLK_DISABLE();
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a21      	ldr	r2, [pc, #132]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007e8:	f023 0310 	bic.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ee:	e035      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOF)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <GPIO_PeriClockEnable+0x1ec>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d106      	bne.n	8000806 <GPIO_PeriClockEnable+0x172>
			GPIOF_PCLK_DISABLE();
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 80007fe:	f023 0320 	bic.w	r3, r3, #32
 8000802:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000804:	e02a      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOG)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <GPIO_PeriClockEnable+0x1f0>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PeriClockEnable+0x188>
			GPIOG_PCLK_DISABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081a:	e01f      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOH)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <GPIO_PeriClockEnable+0x1f4>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d106      	bne.n	8000832 <GPIO_PeriClockEnable+0x19e>
			GPIOH_PCLK_DISABLE();
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a10      	ldr	r2, [pc, #64]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 800082a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000830:	e014      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOI)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <GPIO_PeriClockEnable+0x1f8>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <GPIO_PeriClockEnable+0x1b4>
			GPIOI_PCLK_DISABLE();
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000846:	e009      	b.n	800085c <GPIO_PeriClockEnable+0x1c8>
		else if(pGPIOx == GPIOJ)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a11      	ldr	r2, [pc, #68]	; (8000890 <GPIO_PeriClockEnable+0x1fc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d105      	bne.n	800085c <GPIO_PeriClockEnable+0x1c8>
			GPIOJ_PCLK_DISABLE();
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <GPIO_PeriClockEnable+0x1d8>)
 8000856:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40020000 	.word	0x40020000
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400
 8000874:	40020800 	.word	0x40020800
 8000878:	40020c00 	.word	0x40020c00
 800087c:	40021000 	.word	0x40021000
 8000880:	40021400 	.word	0x40021400
 8000884:	40021800 	.word	0x40021800
 8000888:	40021c00 	.word	0x40021c00
 800088c:	40022000 	.word	0x40022000
 8000890:	40022400 	.word	0x40022400

08000894 <SPI_PeriClkEnable>:
 */

#include<spi.h>

void SPI_PeriClkEnable(SPI_RegDef_t *pSPIx, uint8_t EnaOrDis)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
	if(EnaOrDis == ENABLE)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d120      	bne.n	80008e8 <SPI_PeriClkEnable+0x54>
	{
		if(pSPIx == SPI1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a22      	ldr	r2, [pc, #136]	; (8000934 <SPI_PeriClkEnable+0xa0>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <SPI_PeriClkEnable+0x28>
			SPI1_PCLK_ENABLE();
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 80008b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI2)
			SPI2_PCLK_ENABLE();
		else if(pSPIx == SPI3)
			SPI3_PCLK_ENABLE();
	}
}
 80008ba:	e035      	b.n	8000928 <SPI_PeriClkEnable+0x94>
		else if(pSPIx == SPI2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <SPI_PeriClkEnable+0xa8>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d106      	bne.n	80008d2 <SPI_PeriClkEnable+0x3e>
			SPI2_PCLK_ENABLE();
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008d0:	e02a      	b.n	8000928 <SPI_PeriClkEnable+0x94>
		else if(pSPIx == SPI3)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <SPI_PeriClkEnable+0xac>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d126      	bne.n	8000928 <SPI_PeriClkEnable+0x94>
			SPI3_PCLK_ENABLE();
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 80008e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008e6:	e01f      	b.n	8000928 <SPI_PeriClkEnable+0x94>
		if(pSPIx == SPI1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <SPI_PeriClkEnable+0xa0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d106      	bne.n	80008fe <SPI_PeriClkEnable+0x6a>
			SPI1_PCLK_ENABLE();
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 80008f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 80008f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008fa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008fc:	e014      	b.n	8000928 <SPI_PeriClkEnable+0x94>
		else if(pSPIx == SPI2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <SPI_PeriClkEnable+0xa8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d106      	bne.n	8000914 <SPI_PeriClkEnable+0x80>
			SPI2_PCLK_ENABLE();
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000912:	e009      	b.n	8000928 <SPI_PeriClkEnable+0x94>
		else if(pSPIx == SPI3)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SPI_PeriClkEnable+0xac>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d105      	bne.n	8000928 <SPI_PeriClkEnable+0x94>
			SPI3_PCLK_ENABLE();
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SPI_PeriClkEnable+0xa4>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40013000 	.word	0x40013000
 8000938:	40023800 	.word	0x40023800
 800093c:	40003800 	.word	0x40003800
 8000940:	40003c00 	.word	0x40003c00

08000944 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

	SPI_PeriClkEnable(pSPIHandle->pSPIx, ENABLE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff9e 	bl	8000894 <SPI_PeriClkEnable>
	//CONFIGURE spi CR1 REGISTER
	uint32_t temp = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]

	//Configure device mode
	temp |= (pSPIHandle->SPIConfig.SPI_DEVICEMODE << 2);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	4313      	orrs	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_FULLDUPLEX)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d104      	bne.n	800097a <SPI_Init+0x36>
	{
		// BIDI mode should be cleared
		temp &= ~(1<<15);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e014      	b.n	80009a4 <SPI_Init+0x60>

	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_HALFDUPLEX)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d104      	bne.n	800098c <SPI_Init+0x48>
	{
		//BIDI mode should be set
		temp |= (1<<15);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	e00b      	b.n	80009a4 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_SIMPLEX_RXONLY)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d107      	bne.n	80009a4 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		temp &= ~(1<<15);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800099a:	60fb      	str	r3, [r7, #12]
		// RXOnly bit must be set
		temp |= (1<<10);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a2:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure the serail clock
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	temp |= pSPIHandle->SPIConfig.SPI_DFF <<11;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	02db      	lsls	r3, r3, #11
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]

	//7. Configure SSM bit
	temp |= pSPIHandle->SPIConfig.SPI_SSM << 9;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	025b      	lsls	r3, r3, #9
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]

	//Save in main resgiter
	pSPIHandle->pSPIx->SPI_CR1 = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	601a      	str	r2, [r3, #0]

}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <SPI_SendData>:
	else if(pSPIHandle->pSPIx == SPI3)
		SPI3_REG_RESET();
}

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t length)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
	while(length > 0)
 80009fa:	e027      	b.n	8000a4c <SPI_SendData+0x5e>
	{
		//1. Wait until TXE is 0
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == RESET);
 80009fc:	bf00      	nop
 80009fe:	2102      	movs	r1, #2
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f000 f82b 	bl	8000a5c <SPI_GetFlagStatus>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f8      	beq.n	80009fe <SPI_SendData+0x10>
		//while(! (pSPIx->SPI_SR & (1<<1 )));

		//2. Check DFF bit
		if((pSPIx->SPI_CR1 & (1<<11)))
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00e      	beq.n	8000a36 <SPI_SendData+0x48>
		{
			//16 bit data
			//1. Load the data in the DR
			pSPIx->SPI_DR = *((uint16_t*)pTxBuffer);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	60da      	str	r2, [r3, #12]
			length--;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
			length--;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	e00a      	b.n	8000a4c <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit data
			pSPIx->SPI_DR = *pTxBuffer;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	60da      	str	r2, [r3, #12]
			length--;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
	while(length > 0)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1d4      	bne.n	80009fc <SPI_SendData+0xe>
		}
	}


}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SPI_GetFlagStatus>:


}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t Flagname)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	if(pSPIx->SPI_SR & Flagname)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SPI_GetFlagStatus+0x1a>
	{
		return SET;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <SPI_GetFlagStatus+0x1c>
	}
	return RESET;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SPI_PeripheralEnable>:

void SPI_PeripheralEnable(SPI_RegDef_t *pSPIx, uint8_t EnaOrDis)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
	if(EnaOrDis == ENABLE)
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d106      	bne.n	8000aa4 <SPI_PeripheralEnable+0x20>
	{
		pSPIx->SPI_CR1 |= (1<<6);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIx->SPI_CR1 &= ~(1<<6);
	}

}
 8000aa2:	e005      	b.n	8000ab0 <SPI_PeripheralEnable+0x2c>
		pSPIx->SPI_CR1 &= ~(1<<6);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SPI_SSIConfig>:


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnaOrDis)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
	if(EnaOrDis == ENABLE)
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d106      	bne.n	8000adc <SPI_SSIConfig+0x20>
	{
		pSPIx->SPI_CR1 |= (1<<8);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->SPI_CR1 &= ~(1<<8);
	}
}
 8000ada:	e005      	b.n	8000ae8 <SPI_SSIConfig+0x2c>
		pSPIx->SPI_CR1 &= ~(1<<8);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <__libc_init_array>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4d0d      	ldr	r5, [pc, #52]	; (8000b2c <__libc_init_array+0x38>)
 8000af8:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__libc_init_array+0x3c>)
 8000afa:	1b64      	subs	r4, r4, r5
 8000afc:	10a4      	asrs	r4, r4, #2
 8000afe:	2600      	movs	r6, #0
 8000b00:	42a6      	cmp	r6, r4
 8000b02:	d109      	bne.n	8000b18 <__libc_init_array+0x24>
 8000b04:	4d0b      	ldr	r5, [pc, #44]	; (8000b34 <__libc_init_array+0x40>)
 8000b06:	4c0c      	ldr	r4, [pc, #48]	; (8000b38 <__libc_init_array+0x44>)
 8000b08:	f000 f818 	bl	8000b3c <_init>
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	10a4      	asrs	r4, r4, #2
 8000b10:	2600      	movs	r6, #0
 8000b12:	42a6      	cmp	r6, r4
 8000b14:	d105      	bne.n	8000b22 <__libc_init_array+0x2e>
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1c:	4798      	blx	r3
 8000b1e:	3601      	adds	r6, #1
 8000b20:	e7ee      	b.n	8000b00 <__libc_init_array+0xc>
 8000b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b26:	4798      	blx	r3
 8000b28:	3601      	adds	r6, #1
 8000b2a:	e7f2      	b.n	8000b12 <__libc_init_array+0x1e>
 8000b2c:	08000b58 	.word	0x08000b58
 8000b30:	08000b58 	.word	0x08000b58
 8000b34:	08000b58 	.word	0x08000b58
 8000b38:	08000b5c 	.word	0x08000b5c

08000b3c <_init>:
 8000b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3e:	bf00      	nop
 8000b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b42:	bc08      	pop	{r3}
 8000b44:	469e      	mov	lr, r3
 8000b46:	4770      	bx	lr

08000b48 <_fini>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	bf00      	nop
 8000b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4e:	bc08      	pop	{r3}
 8000b50:	469e      	mov	lr, r3
 8000b52:	4770      	bx	lr
