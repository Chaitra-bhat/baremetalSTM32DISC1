/*
 * uart.h
 *
 *  Created on: Dec 31, 2021
 *      Author: Navjeevan
 */

#ifndef INC_UART_H_
#define INC_UART_H_

#include<stm32f4xx_driver.h>

typedef struct
{
	uint32_t USARTMode;
	uint32_t USARTBaud;
	uint32_t USART_StopBits;
	uint32_t USART_WordLength;
	uint32_t USART_ParityControl;
	uint32_t USART_HWFlowControl;
}USART_Config_t;


typedef struct
{
 USART_RegDef_t *pUSARTx;
 USART_Config_t pUSARTPinConfig;
}USART_Handle_t;

//DEFEINITIONS
#define USART_CR1_SBK		(1<<0)
#define USART_CR1_RWU		(1<<1)
#define USART_CR1_RE 		(1<<2)
#define USART_CR1_TE		(1<<3)
#define USART CR1_IDLEIE	(1<<4)
#define USART_CR1_RXNEIE	(1<<5)
#define USART_CR1_TCIE		(1<<6)
#define USART_CR1_TXEIE		(1<<7)
#define USART_CR1_PEIE		(1<<8)
#define USART_CR1_PS		(1<<9)
#define USART_CR1_PCE		(1<<10)
#define USART_CR1_WAKE		(1<<11)
#define USART_CR1_M			(1<<12)
#define USART_CR1_UE		(1<<13)
#define USART_CR1_OVER8		(1<<15)


/*
 *@USART_Mode
 *Possible options for USART_Mode
 */
#define USART_MODE_ONLY_TX 0
#define USART_MODE_ONLY_RX 1
#define USART_MODE_TXRX  2

/*
 *@USART_Baud
 *Possible options for USART_Baud
 */
#define USART_STD_BAUD_1200					1200
#define USART_STD_BAUD_2400					400
#define USART_STD_BAUD_9600					9600
#define USART_STD_BAUD_19200 				19200
#define USART_STD_BAUD_38400 				38400
#define USART_STD_BAUD_57600 				57600
#define USART_STD_BAUD_115200 				115200
#define USART_STD_BAUD_230400 				230400
#define USART_STD_BAUD_460800 				460800
#define USART_STD_BAUD_921600 				921600
#define USART_STD_BAUD_2M 					2000000
#define SUART_STD_BAUD_3M 					3000000


/*
 *@USART_ParityControl
 *Possible options for USART_ParityControl
 */
#define USART_PARITY_EN_ODD   2
#define USART_PARITY_EN_EVEN  1
#define USART_PARITY_DISABLE   0


 //Possible options for USART_WordLength

#define USART_WORDLEN_8BITS  0
#define USART_WORDLEN_9BITS  1



 //Possible options for USART_NoOfStopBits

#define USART_STOPBITS_1     0
#define USART_STOPBITS_0_5   1
#define USART_STOPBITS_2     2
#define USART_STOPBITS_1_5   3

//Possible options for USART_HWFlowControl

#define USART_HW_FLOW_CTRL_NONE    	0
#define USART_HW_FLOW_CTRL_CTS    	1
#define USART_HW_FLOW_CTRL_RTS    	2
#define USART_HW_FLOW_CTRL_CTS_RTS	3

/*
#define
#define
#define
#define
#define
#define
#define
#define
#define
#define
#define
#define
*/


//FUNCTION PROTOTYPES
void USART_PeriClockEnable(USART_RegDef_t *pUSARTx, uint8_t EnaOrDis);
void USART_PeripheralEnable(USART_RegDef_t *pUSARTx, uint8_t EnaOrDis);
void USART_Init(USART_Handle_t *pUSARTHandle);
void USART_DeInit(USART_RegDef_t *pUSARTx);
void USART_SendData(USART_RegDef_t *pUSARTx,uint8_t *pTxBuffer, uint32_t Len);
void USART_ReceiveData(USART_RegDef_t *pUSARTx, uint8_t *pRxBuffer, uint32_t Len);
uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len);
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len);
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t Flagname);
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnaOrDis);
void USART_IRQHandler(USART_Handle_t *pUSARTHandle);
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQpriority);


#endif /* INC_UART_H_ */
